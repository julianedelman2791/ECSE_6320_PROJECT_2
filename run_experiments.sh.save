#!/bin/bash

# Script: run_experiments.sh
# Purpose: Automate running matrix multiplication experiments and record timing results.

set -e

# Output CSV file
OUTPUT_FILE="results.csv"

# Remove existing results file if it exists
rm -f "$OUTPUT_FILE"

# Create CSV header
echo "Experiment,Matrix_Size,Sparsity_A,Sparsity_B,Multi-threading,Threads,SIMD,Cache_Opt,Time_s" > "$OUTPUT_FILE"

matrix_sizes=(1000 5000 10000)
sparsity_levels=(1.0 0.01 0.001)  # 100%, 1%, 0.1%

multi_threading_options=("Off" "On")
threads_options=(4)
simd_options=("Off" "On")
cache_opt_options=("Off" "On")

exp_num=1

run_experiment() {
    local size=$1
    local sparsity_a=$2
    local sparsity_b=$3
    local mt=$4
    local threads=$5
    local simd=$6
    local cache_opt=$7

    cmd="./matrix_multiply --size $size --sparsity-A $sparsity_a --sparsity-B $sparsity_b"

    # Add optimization flags
    if [ "$mt" == "On" ]; then
        cmd+=" --threads $threads"
    fi

    if [ "$simd" == "On" ]; then
        cmd+=" --simd"
    fi

    if [ "$cache_opt" == "On" ]; then
        cmd+=" --cache-opt"
    fi

    echo "Running Experiment $exp_num: $cmd"

    output=$($cmd 2>&1)

    time_taken=$(echo "$output" | awk '/Time taken:/ {print $3}')

    if [ -z "$time_taken" ]; then
        echo "Warning: Time taken not found in output for Experiment $exp_num."
        echo "Program Output:"
        echo "$output"
        time_taken="N/A"
    fi

    # Append results to CSV
    echo "$exp_num,$size,$sparsity_a,$sparsity_b,$mt,$threads,$simd,$cache_opt,$time_taken" >> "$OUTPUT_FILE"

    echo "Experiment $exp_num completed. Time taken: $time_taken seconds."
    echo "----------------------------------------"

    # Increment experiment number
    exp_num=$((exp_num + 1))
}

# ------------------------------
# 1. Varying Matrix Size and Sparsity
# ------------------------------
echo "Starting Experiments: Varying Matrix Size and Sparsity"
for size in "${matrix_sizes[@]}"; do
    for sparsity_a in "${sparsity_levels[@]}"; do
        for sparsity_b in "${sparsity_levels[@]}"; do
            run_experiment "$size" "$sparsity_a" "$sparsity_b" "Off" "N/A" "Off" "Off"
            run_experiment "$size" "$sparsity_a" "$sparsity_b" "On" "${threads_options[0]}" "Off" "Off"
            run_experiment "$size" "$sparsity_a" "$sparsity_b" "Off" "N/A" "On" "Off"
            run_experiment "$size" "$sparsity_a" "$sparsity_b" "Off" "N/A" "Off" "On"
            run_experiment "$size" "$sparsity_a" "$sparsity_b" "On" "${threads_options[0]}" "On" "Off"
            run_experiment "$size" "$sparsity_a" "$sparsity_b" "On" "${threads_options[0]}" "Off" "On"
            run_experiment "$size" "$sparsity_a" "$sparsity_b" "Off" "N/A" "On" "On"
            run_experiment "$size" "$sparsity_a" "$sparsity_b" "On" "${threads_options[0]}" "On" "On"
        done
    done
done

# ------------------------------
# 2. Optimization Experiments for Specific Matrices
# ------------------------------
echo "Starting Optimization Experiments for Specific Matrices"

size1=1000
sparsity_a1=1.0
sparsity_b1=1.0

size2=10000
sparsity_a2=0.01
sparsity_b2=0.01
